import Head from 'next/head'
import { Button, Heading, MultiStep, Text, TextInput } from '@ui-ignite/react'
import { Container, Form, FormError, Header } from './styles'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { ArrowRight } from '@phosphor-icons/react'

const registerFormSchema = z.object({
  username: z
    .string()
    .min(3, { message: 'Nome de usuário precisa no mínimo de 3 letras.' })
    .regex(/^([a-z\\\\-]+)$/i, {
      message: 'O usuário só pode conter letras e hifens.',
    })
    .transform((username) => username.toLowerCase()),
  name: z.string().min(3, { message: 'Digite seu nome completo.' }),
})

type registerFormData = z.infer<typeof registerFormSchema>

export default function Register() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<registerFormData>({
    resolver: zodResolver(registerFormSchema),
  })

  async function handleRegister(data: registerFormData) {
    console.log(data)
  }

  return (
    <>
      <Head>
        <title>Registro | Ignite Call</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Header>
          <Heading as="strong">Bem-vindo ao Ignite Call!</Heading>
          <Text>
            Precisamos de algumas informações para criar seu perfil! Ah, você
            pode editar essas informações depois.
          </Text>

          <MultiStep size={4} currentStep={1} />
        </Header>
        <Form as="form" onSubmit={handleSubmit(handleRegister)}>
          <label>
            <Text size="sm">Nome de usuário</Text>
            <TextInput
              prefix="call.com/"
              placeholder="seu-usuário"
              {...register('username')}
            />
            {errors.username ? (
              <FormError size="sm">{errors.username.message}</FormError>
            ) : null}
          </label>

          <label>
            <Text size="sm">Nome completo</Text>
            <TextInput placeholder="Seu nome" {...register('name')} />
            {errors.name ? (
              <FormError size="sm">{errors.name.message}</FormError>
            ) : null}
          </label>

          <Button type="submit" disabled={isSubmitting}>
            Próximo passo
            <ArrowRight />
          </Button>
        </Form>
      </Container>
    </>
  )
}
